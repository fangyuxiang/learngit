1. 本地创建Git库并初始化
fyx@Joe MINGW64 /e/git_config_test
   $ git init
   Initialized empty Git repository in E:/git_config_test/.git/

2. 配置全局变量：用户名和密码
fyx@Joe MINGW64 /e/git_config_test/home (master)
   $ git config --global user.email "fyx123456@163.com"
   $ git config --global user.name "fqy"

3. 全局变量配置成功的标志：可以正常提交代码到本地库。
fyx@Joe MINGW64 /e/git_config_test/home (master)
   $ git commit -m "add git_config_test.py for test"
	[master 7c0f4fb] add git_config_test.py for test
	1 file changed, 0 insertions(+), 0 deletions(-)
	create mode 100644 git_config-test.py
		（如果没有配置用户名或则密码会出现如下提示信息：
			fyx@Joe MINGW64 /e/git_config_test/home (master)
			$ git commit -m "add git_config_test.py for test"

			*** Please tell me who you are.

			Run

			git config --global user.email "you@example.com"
			git config --global user.name "Your Name"

			to set your account's default identity.
			Omit --global to set the identity only in this repository.

			fatal: unable to auto-detect email address (got 'fyx@Joe.(none)')	
		）

4. 本地创建分支并编辑。
	a): 创建分支并且切换到刚创建的分支上。
		fyx@Joe MINGW64 /e/git_config_test/home (master)
			$ git checkout -b dev
			Switched to a new branch 'dev'
	
	b): 添加文件，并提交到本地库
		fyx@Joe MINGW64 /e/git_config_test/home (dev)
			$ ls
			git_config-test.py  README.md
		###创建文件
		fyx@Joe MINGW64 /e/git_config_test/home (dev)
			$ touch hello.py
		###添加文件到暂存区
		fyx@Joe MINGW64 /e/git_config_test/home (dev)
			$ git add hello.py
		###提交文件到本地库
		fyx@Joe MINGW64 /e/git_config_test/home (dev)
			$ git commit -m "add hello.py file"
			[dev c6b2ae6] add hello.py file
			1 file changed, 0 insertions(+), 0 deletions(-)
			create mode 100644 hello.py
		###可以通过status确认修改的地方以全部提交。
		fyx@Joe MINGW64 /e/git_config_test/home (dev)
			$ git stauts

5. git commit -a -m和 git commit -am的区别：
	a): git commit -a -m：适用于文件未跟踪，即暂时没有add到暂存区。
	b): git commit -am: 适用于已跟踪的文件，即已经add到暂存区，对已有文件修改后，直接更新即可。

6. 文件回退：
	a): 添加到暂存区，但还没有更新到本地库。
		git reset HEAD fielname
	b): 已更新到本地库，但还没有更新到远程库。
		step one:
			git reset --hard file_id(从远程库回退到本地库)
		step two:
			git reset HEAD filename
			
6. 将本地分支推送到远程库。
a): 将当前库push到远程指定库：
	git push origin target-branch（master/dev:如果远程库上没有此分支，则自动创建。）
b): 指定本地库到远程指定库：
	git push origin local_branch:remote_branch (如果远程库上没有此分支，则自动创建。)

c): Fox exsample: 将当前的dev库推送到远程dev分支。 
	fyx@Joe MINGW64 /e/git_config_test/home (dev)
		$ git push origin dev
		Counting objects: 2, done.
		Delta compression using up to 4 threads.
		Compressing objects: 100% (2/2), done.
		Writing objects: 100% (2/2), 282 bytes | 0 bytes/s, done.
		Total 2 (delta 0), reused 0 (delta 0)
		To git@github.com:fyxgit/home.git
		* [new branch]      dev -> dev

7. 从远程分支中更新代码到本地分支中。
a): 第一次更新失败：没有将本地分支与远程对应的分支进行关联。
	$ git pull
		There is no tracking information for the current branch.
		Please specify which branch you want to merge with.
		See git-pull(1) for details.

		git pull <remote> <branch>

		If you wish to set tracking information for this branch you can do so with:

			git branch --set-upstream-to=origin/<branch> dev

b): 将本地分支与远程对应分支进行关联
	method 1:
		$ git branch --set-upstream-to=origin/dev dev
	method 2:
		$ git branch --set-upstream-to local_branch origin/branch
c): 再次进行更新
	fyx@Joe MINGW64 /e/git_config_test/home (dev)
		$ git pull
		Updating c6b2ae6..055e729
		Fast-forward
		hello.py | 1 +
		1 file changed, 1 insertion(+)
		
8. 远程库的添加和查看
a): 远程库名称默认
	git remote add "git@github.com:fangyuxiang/learning.git" (远程库默认名字：origin)
    git remote add origin "git@github.com:fangyuxiang/learning.git"(等价于上句)
b): 自定义远程库名称
	好处：存在多个远程库，我们使用不同的名称来标识不同的远程库。
	git remote add mayue "git@gitee.com:studyRestful/learngit.git"
c): 查看远程库信息：
	git remote -v
	gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)
	gitee    git@gitee.com:liaoxuefeng/learngit.git (push)
	github    git@github.com:michaelliao/learngit.git (fetch)
	github    git@github.com:michaelliao/learngit.git (push)